name: 'HCP Terraform Run'
description: 'Trigger an HCP Terraform run using official HashiCorp GitHub Actions'

inputs:
  tfc_hostname:
    description: 'HCP Terraform hostname (default: https://app.terraform.io)'
    required: false
    default: 'app.terraform.io'
  tfc_organization:
    description: 'HCP Terraform organization name'
    required: true
  tfc_project_id:
    description: 'HCP Terraform project ID'
    required: true
  tfc_workspace:
    description: 'HCP Terraform workspace name'
    required: true
  terraform_directory:
    description: 'Path to Terraform configuration'
    required: false
    default: '.'
  tfc_token:
    description: 'HCP Terraform API token'
    required: true

runs:
  using: 'composite'
  steps:
    - name: Ensure HCP Terraform Workspace Exists and Create if Not
      shell: bash
      env:
        TFC_ORG: ${{ inputs.tfc_organization }}
        TFC_WORKSPACE: ${{ inputs.tfc_workspace }}
        TFC_TOKEN: ${{ inputs.tfc_token }}
        TFC_PROJECT_ID: ${{ inputs.tfc_project }}
      run: |
        echo "Checking if workspace '$TFC_WORKSPACE' exists in org '$TFC_ORG'..."

        response=$(curl -s -o response.json -w "%{http_code}" \
          --header "Authorization: Bearer $TFC_TOKEN" \
          --header "Content-Type: application/vnd.api+json" \
          "https://app.terraform.io/api/v2/organizations/$TFC_ORG/workspaces/$TFC_WORKSPACE")

        if [ "$response" = "404" ]; then
          echo "Workspace not found. Creating workspace '$TFC_WORKSPACE'..."
          curl -s \
            --header "Authorization: Bearer $TFC_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data '{
              "data": {
                "type": "workspaces",
                "attributes": {
                  "name": "'"$TFC_WORKSPACE"'"
                },
                "relationships": {
                  "project": {
                    "data": {
                      "id": "'"$TFC_PROJECT_ID"'",
                      "type": "projects"
                    }
                  }
                }
              }
            }' \
            "https://app.terraform.io/api/v2/organizations/$TFC_ORG/workspaces"
          echo "Workspace created."
        elif [ "$response" = "200" ]; then
          echo "Workspace already exists."
        else
          echo "Unexpected response: HTTP $response"
          cat response.json
          exit 1
        fi

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set TFE_TOKEN env var
      env:
        TFE_TOKEN: ${{ inputs.tfc_token }}
      run: echo "TFE_TOKEN is set"

    - name: Upload Terraform Configuration
      uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.3.2
      with:
        hostname: ${{ inputs.tfc_hostname }}
        token: ${{ inputs.tfc_token }}
        organization: ${{ inputs.tfc_organization }}
        workspace: ${{ inputs.tfc_workspace }}
        directory: ${{ inputs.terraform_directory }}

    - name: Create Terraform Run
      id: create-run
      uses: hashicorp/tfc-workflows-github/actions/create-run@v1.3.2
      with:
        hostname: ${{ inputs.tfc_hostname }}
        token: ${{ inputs.tfc_token }}
        organization: ${{ inputs.tfc_organization }}
        workspace: ${{ inputs.tfc_workspace }}
        message: 'Triggered via GitHub Actions'

    - name: Wait for Plan & Display
      uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.3.2
      with:
        hostname: ${{ inputs.tfc_hostname }}
        token: ${{ inputs.tfc_token }}
        organization: ${{ inputs.tfc_organization }}
        plan: ${{ steps.create-run.outputs.plan_id }}

    - name: Debug Run Context
      shell: bash
      run: |
        echo "is_speculative: ${{ steps.create-run.outputs.is_speculative }}"
        echo "is_destroy: ${{ steps.create-run.outputs.is_destroy }}"
        echo "run_id=${{ steps.create-run.outputs.run_id }}"
        echo "tfc_token is set: ${{ inputs.tfc_token != '' && 'yes' || 'no' }}"
        echo "TFE_TOKEN env var is set: ${{ env.TFE_TOKEN != '' && 'yes' || 'no' }}"

    - name: Auto Apply
      uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.3.2
      with:
        hostname: ${{ inputs.tfc_hostname }}
        token: ${{ inputs.tfc_token }}
        organization: ${{ inputs.tfc_organization }}
        run: ${{ steps.create-run.outputs.run_id }}
